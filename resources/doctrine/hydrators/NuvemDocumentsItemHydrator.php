<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\Query\Query;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class NuvemDocumentsItemHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate(object $document, array $data, array $hints = array()): array
    {
        $hydratedData = array();

        /** @Field(type="string") */
        if (isset($data['sku']) || (! empty($this->class->fieldMappings['sku']['nullable']) && array_key_exists('sku', $data))) {
            $value = $data['sku'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['sku']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['sku']->setValue($document, $return);
            $hydratedData['sku'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['name']) || (! empty($this->class->fieldMappings['name']['nullable']) && array_key_exists('name', $data))) {
            $value = $data['name'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['name']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['name']->setValue($document, $return);
            $hydratedData['name'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['quantity']) || (! empty($this->class->fieldMappings['quantity']['nullable']) && array_key_exists('quantity', $data))) {
            $value = $data['quantity'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['quantity']['type'];
                $return = (int) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['quantity']->setValue($document, $return);
            $hydratedData['quantity'] = $return;
        }

        /** @Field(type="float") */
        if (isset($data['unitValue']) || (! empty($this->class->fieldMappings['unitValue']['nullable']) && array_key_exists('unitValue', $data))) {
            $value = $data['unitValue'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['unitValue']['type'];
                $return = (float) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['unitValue']->setValue($document, $return);
            $hydratedData['unitValue'] = $return;
        }

        /** @Field(type="float") */
        if (isset($data['totalValue']) || (! empty($this->class->fieldMappings['totalValue']['nullable']) && array_key_exists('totalValue', $data))) {
            $value = $data['totalValue'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['totalValue']['type'];
                $return = (float) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['totalValue']->setValue($document, $return);
            $hydratedData['totalValue'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['createdAt'])) {
            $value = $data['createdAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['createdAt']->setValue($document, clone $return);
            $hydratedData['createdAt'] = $return;
        }
        return $hydratedData;
    }
}