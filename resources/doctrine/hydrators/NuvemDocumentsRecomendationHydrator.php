<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\Query\Query;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class NuvemDocumentsRecomendationHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate(object $document, array $data, array $hints = array()): array
    {
        $hydratedData = array();

        /** @EmbedOne */
        if (isset($data['_id'])) {
            $embeddedDocument = $data['_id'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['item'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['item'], $document, '_id');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            if (empty($hints[Query::HINT_READ_ONLY])) {
                $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);
            }

            $this->class->reflFields['item']->setValue($document, $return);
            $hydratedData['item'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['count']) || (! empty($this->class->fieldMappings['count']['nullable']) && array_key_exists('count', $data))) {
            $value = $data['count'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['count']['type'];
                $return = (int) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['count']->setValue($document, $return);
            $hydratedData['count'] = $return;
        }
        return $hydratedData;
    }
}